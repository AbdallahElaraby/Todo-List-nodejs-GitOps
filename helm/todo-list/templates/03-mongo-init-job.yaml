
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "todo-list.fullname" . }}-mongo-init
  labels:
    app: mongo
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: mongo-init
          image: mongo:6.0
          command: ["sh", "-c"]
          args:
            - |
              echo "Waiting for all MongoDB members to be ready..."

              HOST0="my-final-todo-list-mongo-0.my-final-todo-list-mongo.default.svc.cluster.local"
              HOST1="my-final-todo-list-mongo-1.my-final-todo-list-mongo.default.svc.cluster.local"
              HOST2="my-final-todo-list-mongo-2.my-final-todo-list-mongo.default.svc.cluster.local"

              until mongosh "mongodb://$HOST0" --eval "db.hello().isWritablePrimary || db.hello().secondary" | grep -q true && \
                    mongosh "mongodb://$HOST1" --eval "db.hello().isWritablePrimary || db.hello().secondary" | grep -q true && \
                    mongosh "mongodb://$HOST2" --eval "db.hello().isWritablePrimary || db.hello().secondary" | grep -q true
              do
                echo "Waiting for all 3 MongoDB nodes to be ready..."
                sleep 5
              done

              echo "All nodes are up. Checking if replica set is initialized..."

              mongosh "mongodb://$HOST0" --eval '
                try {
                  const status = rs.status();
                  if (status.ok === 1) {
                    print("Replica set already initialized.");
                    quit();
                  }
                } catch (e) {
                  if (e.code === 94 || e.codeName === "NotYetInitialized") {
                    print("Replica set not initialized. Running rs.initiate()...");
                    rs.initiate({
                      _id: "rs0",
                      members: [
                        { _id: 0, host: "'$HOST0'" },
                        { _id: 1, host: "'$HOST1'" },
                        { _id: 2, host: "'$HOST2'" }
                      ]
                    });
                  } else {
                    print("Unexpected error: " + e);
                  }
                }
              '
#           command: [ "sh", "-c" ]
#           args:
#             - |
#               echo "Waiting for MongoDB primary (mongo-0) to be ready..."
#               until mongosh "mongodb://{{ include "todo-list.fullname" . }}-mongo-0.{{ include "todo-list.fullname" . }}-mongo:27017" --eval "db.runCommand({ ping: 1 })" > /dev/null 2>&1; do
#                 echo "MongoDB not ready yet. Sleeping 5s..."
#                 sleep 5
#               done

#               echo "Running replica set initiation..."

#               mongosh "mongodb://{{ include "todo-list.fullname" . }}-mongo-0.{{ include "todo-list.fullname" . }}-mongo:27017" --eval '
#                 try {
#                   const status = rs.status();
#                   if (status.ok === 1) {
#                     print("Replica set already initialized.");
#                   }
#                 } catch (e) {
#                   if (e.code === 94 || e.codeName === "NotYetInitialized") {
#                     print("No replica set config found. Initializing...");
#                     rs.initiate({
#                       _id: "rs0",
#                       members: [
#                         { _id: 0, host: "{{ include "todo-list.fullname" . }}-mongo-0.{{ include "todo-list.fullname" . }}-mongo:27017" },
#                         { _id: 1, host: "{{ include "todo-list.fullname" . }}-mongo-1.{{ include "todo-list.fullname" . }}-mongo:27017" },
#                         { _id: 2, host: "{{ include "todo-list.fullname" . }}-mongo-2.{{ include "todo-list.fullname" . }}-mongo:27017" }
#                       ]
#                     });
#                   } else {
#                     print("Unexpected error: " + e);
#                   }
#                 }
#               '
  backoffLimit: 1
